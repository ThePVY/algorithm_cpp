/*!\file
 * \brief Этот файл содержит структуры, макросы и функции, необходимые для взаимодействия с аппаратным блоком FPU.
 *
 * Copyright(C) НПП Цифровые решения, 2018
 * Copyright(C) Команда разработчиков НПП Цифровые решения
 * Все права защищены.
 *
 * Программное обеспечение, описанное в этом файле, предназначено только для 
 * демонстрационных целей, и предоставляет программистам информацию о продукции 
 * организации "Цифровые решения". Это программное обеспечение поставляется "КАК ЕСТЬ" 
 * без каких-либо гарантий, "Цифровые решения" отказываются от любых гарантий, 
 * фактических или подразумеваемых, включая все подразумеваемые гарантии товарной пригодности, 
 * пригодности для конкретной цели и сохранения прав интеллектуальной собственности. 
 * Организация "Цифровые решения" не несет никакой ответственности за использование 
 * программного обеспечения, не предоставляет лицензий или прав на патент, авторское право, 
 * или любые другие права интеллектуальной собственности, на какие-либо продукты. 
 * Организация "Цифровые решения" оставляет за собой право вносить изменения в программное 
 * обеспечение без уведомления. Организация "Цифровые решения" также не дает никаких 
 * заверений или гарантий, что это программное приложение подойдет для использования 
 * без дальнейшего тестирования или модификаций.
 *
 * Разрешение на использование, копирование, изменение и распространение этого программного 
 * обеспечения и документации предоставляется согласно условиям "Цифровых решений" и 
 * соответствующих авторских прав своей лицензии без оплаты, при условии, 
 * что это программное обеспечение используется совместно с микроконтроллерами организации
 * "Цифровые решения". Эти права должны распространяться во всех копиях этого кода.
 */

#ifndef FPU_H_
#define FPU_H_

#include "types.h"
#include <stdio.h>
#include <math.h> 

/**
 * @brief Структура для доступа к регистрам FPU
 */
typedef struct
{
    __RW uint32_t ADD_SUB;                                                      /**< Смещение: 0x0000 Выбор режима сложение/вычитание */
    __RW float    ADD_A;                                                        /**< Смещение: 0x0004 Операнд А для операции сложения/вычитания */
    __RW float    ADD_B;                                                        /**< Смещение: 0x0008 Операнд В для операции сложения/вычитания  */
    __RW float    MUL_A;                                                        /**< Смещение: 0x000C Первый множитель для операции умножения */
    __RW float    MUL_B;                                                        /**< Смещение: 0x0010 Второй множитель для операции умножения  */
    __WO uint32_t CONTROL;                                                      /**< Смещение: 0x0014 Регистр управления */
    __RO float    ADD_OUT;                                                      /**< Смещение: 0x0018 Результат операции сложения  */
    __RO float    MUL_OUT;	                                                /**< Смещение: 0x001C Результат операции умножения */
}FPU_T;

/**
 * @brief Макросы и типы для регистра ADD_SUB
 */
#define FPU_ADD_SUB_SUB_EN      ((uint32_t)(0 << 0))                            /**< включение режима сложения */
#define FPU_ADD_SUB_ADD_EN      ((uint32_t)(1 << 0))                            /**< включение режима вычитания */

/**
 * @brief Макросы и типы для регистра CONTROL
 */
#define FPU_CONTROL_ADD_EN      ((uint32_t)(1 << 0))                            /**< запуск операции сложения */
#define FPU_CONTROL_MUL_EN      ((uint32_t)(1 << 1))                            /**< запуск операции умножения */

/**
 * @brief Сброс блока FPU.
 * @retval None.
 */
void FPU_DeInit(void);

/**
 * @brief Инициализация блока FPU.
 * @retval None.
 */
void FPU_Init(void);

/**
 * @brief Сложение двух чисел при помощи блока FPU
 * @param A: слагаемое 1
 * @param B: слагаемое 2
 * @retval сумма
 */
float FPU_ADD(float A, float B);

/**
 * @brief Вычитание двух чисел при помощи блока FPU
 * @param A: уменьшаемое
 * @param B: вычитаемое
 * @retval разница
 */
float FPU_SUB(float A, float B);

/**
 * @brief умножение двух чисел при помощи блока FPU
 * @param A: множитель 1
 * @param B: множитель 2
 * @retval произведение
 */
float FPU_MUL(float A, float B);

/**
 * @brief Факториал
 */ 
static int factorial (int n)
{
  return (n < 2) ? 1 : n * factorial (n - 1);
}

/**
 * @brief вычисление синуса
 *
 * Для оптимизации скорости выолнения данной операции использовались как программные средства вычисления, так и средства блока FPU
 * @param A: параметр в радианах
 * @retval синус
 */
float FPU_SIN(float A);
   
/**
 * @brief вычисление арксинуса
 *
 * Для оптимизации скорости выолнения данной операции использовались как программные средства вычисления, так и средства блока FPU
 * @param A: параметр в радианах
 * @retval арксинус
 */
float FPU_ASIN(float A);
   
/**
 * @brief вычисление арккосинуса
 *
 * Для оптимизации скорости выолнения данной операции использовались как программные средства вычисления, так и средства блока FPU
 * @param A: параметр в радианах
 * @retval арккосинуса
 */
float FPU_ACOS(float A);

/**
 * @brief вычисление косинуса
 *
 * Для оптимизации скорости выолнения данной операции использовались как программные средства вычисления, так и средства блока FPU
 * @param A: параметр в радианах
 * @retval косинус
 */
float FPU_COS(float A);

/**
 * @brief Вычисление квадратного корня при помощи блока FPU
 * @param A: число
 * Для оптимизации скорости выолнения данной операции использовались как программные средства вычисления, так и средства блока FPU
 * @retval квадратный корень от A 
 */
float FPU_sqrt(float A);

/**
 * @brief Возведение в квадрат при помощи блока FPU
 * @param A: число
 * @retval квадрат от A 
 */
float FPU_pow2(float A);

/**
 * @brief Возведение в куб при помощи блока FPU
 * @param A: число
 * @retval куб от A 
 */
float FPU_pow3(float A);

/**
 * @brief вычисление тангенса
 *
 * Для оптимизации скорости выолнения данной операции использовались как программные средства вычисления, так и средства блока FPU
 * @param A: параметр в радианах
 * @retval тангенс
 */
float FPU_tg(float A);

/**
 * @brief вычисление арктангенса
 *
 * Для оптимизации скорости выолнения данной операции использовались как программные средства вычисления, так и средства блока FPU
 * @param A: параметр в радианах
 * @retval арктангенс
 */
float FPU_atg(float A);
   


#endif /* FPU_H */