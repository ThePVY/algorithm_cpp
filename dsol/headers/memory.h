/*!\file
 * \brief Этот файл содержит структуры, макросы и функции, необходимые для работы с памятью.
 *
 * Copyright(C) НПП Цифровые решения, 2018
 * Copyright(C) Команда разработчиков НПП Цифровые решения
 * Все права защищены.
 *
 * Программное обеспечение, описанное в этом файле, предназначено только для 
 * демонстрационных целей, и предоставляет программистам информацию о продукции 
 * организации "Цифровые решения". Это программное обеспечение поставляется "КАК ЕСТЬ" 
 * без каких-либо гарантий, "Цифровые решения" отказываются от любых гарантий, 
 * фактических или подразумеваемых, включая все подразумеваемые гарантии товарной пригодности, 
 * пригодности для конкретной цели и сохранения прав интеллектуальной собственности. 
 * Организация "Цифровые решения" не несет никакой ответственности за использование 
 * программного обеспечения, не предоставляет лицензий или прав на патент, авторское право, 
 * или любые другие права интеллектуальной собственности, на какие-либо продукты. 
 * Организация "Цифровые решения" оставляет за собой право вносить изменения в программное 
 * обеспечение без уведомления. Организация "Цифровые решения" также не дает никаких 
 * заверений или гарантий, что это программное приложение подойдет для использования 
 * без дальнейшего тестирования или модификаций.
 *
 * Разрешение на использование, копирование, изменение и распространение этого программного 
 * обеспечения и документации предоставляется согласно условиям "Цифровых решений" и 
 * соответствующих авторских прав своей лицензии без оплаты, при условии, 
 * что это программное обеспечение используется совместно с микроконтроллерами организации
 * "Цифровые решения". Эти права должны распространяться во всех копиях этого кода.
 */

#ifndef MEMORY_H_
#define MEMORY_H_


#define MEMORY_CONTROL_REG_BASE_ADDRESS       (0x20002)                                                 ///< Адрес регистра для переключения страниц MRAM
#define MEMORY_EXPOSURE_TIME                  (1000000)                                                 ///< Адрес EXPOSURE_TIME
#define MEMORY_DATA_REG_BASE_ADDRESS          (0x10000)                                                 ///< Адрес данных
#define MEMORY_CONTROL_REGISTER               ((PMEMORY_CONTROL_MAP)MEMORY_CONTROL_REG_BASE_ADDRESS)    ///< Структура регистров для переключения страниц MRAM
#define MEMORY_DATA_ADDRESS_32                ((uint32_t*)MEMORY_DATA_REG_BASE_ADDRESS)                 ///< uint32_t*
#define MEMORY_DATA_ADDRESS_16                ((uint16_t*)MEMORY_DATA_REG_BASE_ADDRESS)                 ///< uint16_t*
#define MEMORY_DATA_ADDRESS_8                 ((uint8_t*) MEMORY_DATA_REG_BASE_ADDRESS)                 ///< uint8_t*        

#include "types.h"

/**
 * @brief Тип микросхемы памяти.
 */
typedef enum MEMORY_CHIP_
{
    MEM_GPIO =0,
    MEM_SRAM = 4,                                                               /**< MEM_SRAM:  микросхема SRAM */
    MEM_MRAM = 1,                                                               /**< MEM_MRAM:  микросхема MRAM */
    MEM_ROM  = 2                                                                /**< MEM_ROM:   микросхема FLASH*/
}MEMORY_CHIP;

/**
 * @brief Блок памяти.
 */
typedef enum
{
    BLOCK1 = 1,
    BLOCK2 = 2
}BLOCK_NUMBER;

/**
 * @brief  Структура для доступа к регистрам управления памятью
 */
typedef struct _MEMORY_CONTROL_MAP_
{
    __RW uint16_t CE;                                                           /**< Смещение: 0x0000 Регистр для выбора микросхемы памяти:  SRAM = 1, MRAM = 2, ROM  = 4*/ 
    __RW uint16_t MEMADD;                                                       /**< Смещение: 0x0002 Регистр для установки номера страницы памяти от 0 до 15*/ 
}MEMORY_CONTROL_MAP, *PMEMORY_CONTROL_MAP;

/**
 * @brief Функция выключения КЭШа
 */
void Func_Cache_Disable();

/**
 * @brief функция включения КЭШа
 */
void Func_Cache_Enable();
    
/**
 * @brief       Функция установки скраберов
 * @param      	rng_addr - верхняя граница диапазона
 * @param      	prd_stop - период прерывания скрабером обращ контроллера вн памяти
 * @param      	prd_scan - период сканирования
 */
void Func_Scraber_Set(uint32_t  rng_addr,
                      uint32_t  prd_stop,
                      uint32_t  prd_scan,
                      BLOCK_NUMBER number);

/**
 * @brief       Выбор микросхемы памяти
 * @param       MemChip     :Тип микросхемы памяти 	
 */
void MEM_SetChip(MEMORY_CHIP MemChip);

/**
 * @brief       Взять выбранную микросхему
 * @return	Тип микросхемы памяти
 */
uint8_t MEM_GetChip();

/**
 * @brief       Взять установленную страницу памяти
 * @return	Установленная страница памяти
 */
uint8_t MEM_GetPage();

/**
 * @brief       Установка страницы памяти
 * @param       NumPage     :Номер страницы памяти
 */
void MEM_SetPage(uint8_t NumPage);

/**
 * @brief       Запись байтного слова
 * @param       Addr     :Адрес
 * @param       Data     :Байтное слово
 */
void MEM_Write8(uint32_t Addr, uint8_t Data);

/**
 * @brief       Запись двух байтного слова
 * @param       Addr     :Адрес
 * @param       Data     :Двух байтное слово
 */
void MEM_Write16(uint32_t Addr, uint16_t Data);

/**
 * @brief       Запись четырех байтного слова
 * @param       Addr     :Адрес
 * @param       Data     :Четырех байтное слово
 */
void MEM_Write32(uint32_t Addr, uint32_t Data);

/**
 * @brief       Чтение байтного слова
 * @param       Addr     :Адрес
 * @return	Значение байтного слова
 */
uint8_t MEM_Read8(uint32_t Addr);

/**
 * @brief       Чтение двух байтного слова
 * @param       Addr     :Адрес
 * @return	Значение двух байтного слова
 */
uint16_t MEM_Read16(uint32_t Addr);

/**
 * @brief       Чтение четырех байтного слова
 * @param       Addr     :Адрес
 * @return	Значение четырех байтного слова
 */
uint32_t MEM_Read32(uint32_t Addr);


#endif

