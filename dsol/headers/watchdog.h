/*!\file
 * \brief Этот файл содержит структуры, макросы и функции, необходимые для взаимодействия с аппаратным модулем сторожевого таймера.
 *
 * Copyright(C) НПП Цифровые решения, 2018
 * Copyright(C) Команда разработчиков НПП Цифровые решения
 * Все права защищены.
 *
 * Программное обеспечение, описанное в этом файле, предназначено только для 
 * демонстрационных целей, и предоставляет программистам информацию о продукции 
 * организации "Цифровые решения". Это программное обеспечение поставляется "КАК ЕСТЬ" 
 * без каких-либо гарантий, "Цифровые решения" отказываются от любых гарантий, 
 * фактических или подразумеваемых, включая все подразумеваемые гарантии товарной пригодности, 
 * пригодности для конкретной цели и сохранения прав интеллектуальной собственности. 
 * Организация "Цифровые решения" не несет никакой ответственности за использование 
 * программного обеспечения, не предоставляет лицензий или прав на патент, авторское право, 
 * или любые другие права интеллектуальной собственности, на какие-либо продукты. 
 * Организация "Цифровые решения" оставляет за собой право вносить изменения в программное 
 * обеспечение без уведомления. Организация "Цифровые решения" также не дает никаких 
 * заверений или гарантий, что это программное приложение подойдет для использования 
 * без дальнейшего тестирования или модификаций.
 *
 * Разрешение на использование, копирование, изменение и распространение этого программного 
 * обеспечения и документации предоставляется согласно условиям "Цифровых решений" и 
 * соответствующих авторских прав своей лицензии без оплаты, при условии, 
 * что это программное обеспечение используется совместно с микроконтроллерами организации
 * "Цифровые решения". Эти права должны распространяться во всех копиях этого кода.
 */

#ifndef WATCHDOG_H_
#define WATCHDOG_H_

#include "types.h"



/**
 * @brief Структура для доступа к регистрам WATCHDOG.
 */
typedef struct
{
    __RW uint32_t WDOGLOAD;                                                     /**< Смещение: 0x000 Регистр для загрузки значений */
    __RO uint32_t WDOGVALUE;                                                    /**< Смещение: 0x004 Регистр текущее значение */
    __RW uint32_t WDOGCONTROL;                                                  /**< Смещение: 0x008 Регистр управления */
    __WO uint32_t WDOGINTCLR;                                                   /**< Смещение: 0x00C Регистр сброса прерывания */
    __RO uint32_t WDOGRIS;                                                      /**< Смещение: 0x010 Регистр статуса немаскированного прерывания */
    __RO uint32_t WDOGMIS;                                                      /**< Смещение: 0x014 Регистр статуса маскированного прерывания */
         uint32_t RESERVED_0[762];   
    __RW uint32_t WDOGLOCK;                                                     /**< Смещение: 0xC00 Регистр запрещения записи во все остальные регистры сторожевого таймера */
         uint32_t RESERVED_1[191];
    __RW uint32_t WDOGITCR;                                                     /**< Смещение: 0xF00 Регистр включения модуля интеграционного тестирования */
    __WO uint32_t WDOGITOP;                                                     /**< Смещение: 0xF04 Регистр управления портами сброса и прерываний в режиме тестирования */
}WDT_T;  

/**
 * @brief Макросы для регистра WDOGCONTROL
 */
#define WDT_WDOGCONTROL_INTEN                  ((uint32_t)(1 << 0))             /**< разрешает прерывания */
#define WDT_WDOGCONTROL_RESEN                  ((uint32_t)(1 << 1))             /**< разрешает генерацию сброса */
#define WDT_WDOGCONTROL_BITMASK                ((uint32_t)(3 << 0))             

/**
 * @brief Макросы для регистра WDOGINTCLR
 */
#define WDT_WDOGINTCLR_CLR                     ((uint32_t)(1 << 0))             /**< сброс прерывания сторожевого таймера */

/**
 * @brief Макросы для регистра WDOGRIS
 */
#define WDT_WDOGRIS_INT_RAW                    ((uint32_t)(1 << 0))             /**< статус немаскированного прерывания */

/**
 * @brief Макросы для регистра WDOGMIS
 */
#define WDT_WDOGMIS_INT                        ((uint32_t)(1 << 0))             /**< статус маскированного прерывания */

/**
 * @brief Макросы для регистра WDOGLOCK
 */
#define WDT_WDOGLOCK_WEN_UNLOCK                ((uint32_t)(0 << 0))             /**< запись во все регистры разрешена */
#define WDT_WDOGLOCK_WEN_LOCK                  ((uint32_t)(1 << 0))             /**< запись во все регистры запрещена */

/**
 * @brief Макросы для регистра WDOGITCR
 */
#define WDT_WDOGITCR_TEST_MODULE_EN            ((uint32_t)(1 << 0))             /**< включение модуля интеграционного тестирования */
#define WDT_WDOGITCR_TEST_MODULE_DIS           ((uint32_t)(0 << 0))             /**< выключение модуля интеграционного тестирования */

/**
 * @brief Макросы для регистра WDOGITOP
 */
#define WDT_WDOGITOP_WDOGRES                   ((uint32_t)(1 << 0))             /**< значение сброса в режиме тестирования */
#define WDT_WDOGITOP_WDOGINT                   ((uint32_t)(1 << 1))             /**< значение прерывания в режиме тестирования */

/**
 * @brief Выключение аппаратного сброса 
 * @param pWTD: указатель на структуру с регистрами WATCHDOG
 * @retval None
 */
void WDT_HWResetDisable(WDT_T *pWTD);

/**
 * @brief Включение аппаратного сброса
 * @param pWTD: указатель на структуру с регистрами WATCHDOG
 * @retval None
 */
void WDT_HWResetEnable(WDT_T *pWTD);

/**
 * @brief Установка начального значения счетчика сторожевого таймера 
 * @param pWTD: указатель на структуру с регистрами WATCHDOG
 * @param Value: начальное значение счетчика
 * @retval None
 */
void WDT_SetValue(WDT_T *pWTD, uint32_t value);

/**
 * @brief Взять текущее значение счетчика сторожевого таймера 
 * @param pWTD: указатель на структуру с регистрами WATCHDOG
 * @retval Текущее значение счетчика
 */
uint32_t WDT_GetValue(WDT_T *pWTD);

/**
 * @brief Выключение прерывания сторожевого таймера
 * @param pWTD: указатель на структуру с регистрами WATCHDOG
 * @retval None
 */
void WDT_IntDisable(WDT_T *pWTD);
/**
 * @brief Включение прерывания сторожевого таймера 
 * @param pWTD: указатель на структуру с регистрами WATCHDOG
 * @retval None
 */
void WDT_IntEnable(WDT_T *pWTD);
/**
 * @brief Сброс флага прерывания сторожевого таймера и его установка в значение из регистра WDOGLOAD
 * @param pWTD: указатель на структуру с регистрами WATCHDOG
 * @retval None
 */
void WDT_IntClr(WDT_T *pWTD);



#endif /* WATCHDOG_H_ */