/*!\file
 * \brief Этот файл содержит структуры, макросы и функции, необходимые для взаимодействия с аппаратным модулем таймера.
 *
 * Copyright(C) НПП Цифровые решения, 2018
 * Copyright(C) Команда разработчиков НПП Цифровые решения
 * Все права защищены.
 *
 * Программное обеспечение, описанное в этом файле, предназначено только для 
 * демонстрационных целей, и предоставляет программистам информацию о продукции 
 * организации "Цифровые решения". Это программное обеспечение поставляется "КАК ЕСТЬ" 
 * без каких-либо гарантий, "Цифровые решения" отказываются от любых гарантий, 
 * фактических или подразумеваемых, включая все подразумеваемые гарантии товарной пригодности, 
 * пригодности для конкретной цели и сохранения прав интеллектуальной собственности. 
 * Организация "Цифровые решения" не несет никакой ответственности за использование 
 * программного обеспечения, не предоставляет лицензий или прав на патент, авторское право, 
 * или любые другие права интеллектуальной собственности, на какие-либо продукты. 
 * Организация "Цифровые решения" оставляет за собой право вносить изменения в программное 
 * обеспечение без уведомления. Организация "Цифровые решения" также не дает никаких 
 * заверений или гарантий, что это программное приложение подойдет для использования 
 * без дальнейшего тестирования или модификаций.
 *
 * Разрешение на использование, копирование, изменение и распространение этого программного 
 * обеспечения и документации предоставляется согласно условиям "Цифровых решений" и 
 * соответствующих авторских прав своей лицензии без оплаты, при условии, 
 * что это программное обеспечение используется совместно с микроконтроллерами организации
 * "Цифровые решения". Эти права должны распространяться во всех копиях этого кода.
 */

#ifndef TIMER_H_
#define TIMER_H_

#include "types.h"


/** \brief  Структура для доступа к регистрам таймера
 */
typedef struct
{
    __RW uint32_t CTRL;                                                         /**< Смещение: 0x000 Регистр управления */
    __RW uint32_t VALUE;                                                        /**< Смещение: 0x004 Регистр текущее значение */
    __RW uint32_t RELOAD;                                                       /**< Смещение: 0x008 Регистр для загрузки значений */
    __RW uint32_t INTCLEAR;                                                     /**< Смещение: 0x00C Регистр броса прерывания */
}TIMER_T;                                                                           

/**
 * @brief Макросы для регистра CTRL
 */
#define TIMER_CTRL_INT_EN              ((uint32_t)(1 << 3))                     /**< разрешение прерывания таймера */
#define TIMER_CTRL_ZERO2               ((uint32_t)(1 << 2))                     /**< [2] Всегда «0» */
#define TIMER_CTRL_ZERO1               ((uint32_t)(1 << 1))                     /**< [1] Всегда «0» */
#define TIMER_CTRL_OFF                 ((uint32_t)(0 << 0))                     /**< Выключение */


/**
 * @brief Включение таймера
 * @param pTIMER : Указатель на структуру с регистрами таймера
 */
void TIMER_Enable(TIMER_T* pTIMER);

/**
 * @brief Выключение таймера
 * @param pTIMER : Указатель на структуру с регистрами таймера
 */
void TIMER_Disable(TIMER_T* pTIMER);

/**
 * @brief Разрешение работы прерываний таймера
 * @param pTIMER : Указатель на структуру с регистрами таймера
 */
void TIMER_IntEnable(TIMER_T* pTIMER);

/**
 * @brief Запрещение работы прерываний таймера
 * @param pTIMER : Указатель на структуру с регистрами таймера
 */
void TIMER_IntDisable(TIMER_T* pTIMER);

/**
 * @brief Получение текущего значения таймера
 * @param pTIMER : Указатель на структуру с регистрами таймера
 * @return Текущее значение таймера
 */
uint32_t TIMER_GetValue(TIMER_T* pTIMER);

/**
 * @brief Загрузка значения в таймер
 * @param pTIMER : Указатель на структуру с регистрами таймера
 * @param value : Значение, загружаемое в таймер
 */
void TIMER_SetValue(TIMER_T* pTIMER, uint32_t value);

/**
 * @brief Сброс флага прерывания таймера
 * @param pTIMER : Указатель на структуру с регистрами таймера
 */
void TIMER_IntClr(TIMER_T* pTIMER);





#endif                                                                         
                                                                               
                                                                               