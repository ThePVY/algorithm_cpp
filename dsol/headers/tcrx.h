/*!\file
 * \brief Этот файл содержит структуры, макросы и функции, необходимые для взаимодействия с аппаратным модулем приемника телекомандной информации.
 *
 * Copyright(C) НПП Цифровые решения, 2018
 * Copyright(C) Команда разработчиков НПП Цифровые решения
 * Все права защищены.
 *
 * Программное обеспечение, описанное в этом файле, предназначено только для 
 * демонстрационных целей, и предоставляет программистам информацию о продукции 
 * организации "Цифровые решения". Это программное обеспечение поставляется "КАК ЕСТЬ" 
 * без каких-либо гарантий, "Цифровые решения" отказываются от любых гарантий, 
 * фактических или подразумеваемых, включая все подразумеваемые гарантии товарной пригодности, 
 * пригодности для конкретной цели и сохранения прав интеллектуальной собственности. 
 * Организация "Цифровые решения" не несет никакой ответственности за использование 
 * программного обеспечения, не предоставляет лицензий или прав на патент, авторское право, 
 * или любые другие права интеллектуальной собственности, на какие-либо продукты. 
 * Организация "Цифровые решения" оставляет за собой право вносить изменения в программное 
 * обеспечение без уведомления. Организация "Цифровые решения" также не дает никаких 
 * заверений или гарантий, что это программное приложение подойдет для использования 
 * без дальнейшего тестирования или модификаций.
 *
 * Разрешение на использование, копирование, изменение и распространение этого программного 
 * обеспечения и документации предоставляется согласно условиям "Цифровых решений" и 
 * соответствующих авторских прав своей лицензии без оплаты, при условии, 
 * что это программное обеспечение используется совместно с микроконтроллерами организации
 * "Цифровые решения". Эти права должны распространяться во всех копиях этого кода.
 */

#ifndef TCRX_H_
#define TCRX_H_

#include "types.h"

#define TCRX_DSC_COUNT    16                                                    /**< Количество дескрипторов в блоке телекоманд */

/** \brief  Структура дескрипторов модуля приемника телекомандной информации
 */
typedef struct
{
    volatile uint32_t DSCR_PTR;                                                 /**< указатель на начало области во внутренней памяти, предназначенной для записи принятых данных. Начало области должно быть выровнено по 4 байтной границе, младшие 2 бита указателя - нулевые */
    volatile uint32_t DSCR_FLAG_SIZE;
}TCRX_DSC_T;

/** \brief  Структура для доступа к регистрам модуля приемника телекомандной информации
 */
typedef struct
{
    TCRX_DSC_T DSCR_TBL[TCRX_DSC_COUNT];                                        /**< Смещение: 0x000 Таблица дескрипторов, 16 дескрипторов (2 слова на каждый дескриптор) */
    __RW uint32_t   DSCR_CURRENT;                                               /**< Смещение: 0x080 Номер текущего дескриптора */
    __RW uint32_t   GLOBAL_ENABLE;                                              /**< Смещение: 0x084 Включение блока в режим приёма данных  */
    __RW uint32_t   CODER_SEL;                                                  /**< Смещение: 0x088 Настройка параметров кодера */
    __RW uint32_t   PHY_FIFO_OVERFLOW;                                          /**< Смещение: 0x08C Флаг переполнения асинхронного FIFO  */
    __RW uint32_t   START_SEQ;                                                  /**< Смещение: 0x090 Маркер начала фрейма */
    __RW uint32_t   TAIL_SEQ1;                                                  /**< Смещение: 0x094 Маркер конца фрейма, первая половина  */
    __RW uint32_t   TAIL_SEQ2;                                                  /**< Смещение: 0x098 Маркер конца фрейма, вторая половина */
}TCRX_T;

/**
 * @brief Макросы для DSCR_PTR дескриптора
 */
#define DSCR_PTR(x)          ((uint32_t)(((x) & 0x3FFFFFFF) << 0))                /**< указатель на начало области во внутренней памяти, предназначенной для записи принятых данных. 
                                                                                    Начало области должно быть выровнено по 4 байтной границе, младшие 2 бита указателя - нулевые*/


/**
 * @brief Макросы для DSCR_FLAG_SIZE дескриптора
 */
#define TCRX_DSC_DSCR_FLAG_SIZE_SIZE(x)          ((uint32_t)(((x) & 0x3FF) << 0)) /**< установка размера области для записи (0x000 = 1024 байта) */
#define TCRX_DSC_DSCR_FLAG_SIZE_SOF              ((uint32_t)(1 << 16))          /**< флаг, обозначающий, что записанные принятые данные содержат первый байт фрейма */
#define TCRX_DSC_DSCR_FLAG_SIZE_EOF              ((uint32_t)(1 << 17))          /**< флаг, обозначающий, что записанные принятые данные содержат последний байт фрейма */
#define TCRX_DSC_DSCR_FLAG_SIZE_ERROR            ((uint32_t)(1 << 18))          /**< флаг, обозначающий, что принятый фрейм завершается не маркером хвоста, а неисправимой ошибкой БЧХ-декодера */
#define TCRX_DSC_DSCR_FLAG_SIZE_READY            ((uint32_t)(1 << 31))          /**< включение записи принятых данных */

/**
 * @brief Макросы для DSCR_CURRENT
 */
#define TCRX_DSCR_CURRENT_NUM(x)         ((uint32_t)(((x) & 0xF) << 0))           /**< номер текущего дескриптора */
#define TCRX_DSCR_CURRENT_WORK_FLAG           ((uint32_t)(1 << 31))             /**< устанавливается в «1», если текущий дескриптор находится в работе */

/**
 * @brief Макросы для GLOBAL_ENABLE
 */
#define TCRX_GLOBAL_ENABLE_EN            ((uint32_t)(1 << 0))                   /**< включение всех модулей, ответственных за прием данных */

/**
 * @brief Типы для CODER_SEL
 */
typedef enum 
{
    TCRX_CODER_SEL_RAND_SEL = ((uint32_t)(1 << 0)),                             /**< включение рандомизатора */
    TCRX_CODER_SEL_BCH_SEL  = ((uint32_t)(1 << 1)),                             /**< включение декодера БЧХ */
}TCRX_CODER_SEL_T;

/**
 * @brief Макросы для PHY_FIFO_OVERFLOW
 */
#define TCRX_PHY_FIFO_OVERFLOW           ((uint32_t)(1 << 0))                   /**< флаг переполнения памяти асинхронного блока FIFO */

/**
 * @brief Макросы и типы для START_SEQ
 */
#define TCRX_START_SEQ_DATA(x)           ((uint32_t)(((x) & 0xFFFF) << 0))        /**< маркер начала фрейма */

typedef enum 
{
    TCRX_START_SEQ_ALLOW_1_ERR = ((uint32_t)(1 << 31)),                         /**< позволить единичную ошибку в маркере начала фрейма */

} TCRX_START_SEQ_T;

/**
 * @brief Макросы, относящиеся к логике работы контроллера
 */
#define TCRX_DSCR_MAX_SIZE              1024                                    /**< максимальный размер дескриптора (в байтах) */

/**
 * @brief Возвращает значение флага DSCR_READY, показывающее, открыт ли дескриптор
 * @param index	: Номер дескриптора
 * @return Значение флага, SET or RESET
 */
FlagStatus TCRX_Dscr_Ready(uint32_t index);

/**
 * @brief Возвращает количество данных, принятых дескриптором
 * @param index	: Номер дескриптора
 * @return Количество принятых данных, в байтах
 */
uint32_t TCRX_Get_Data_Size(uint32_t index);

/**
 * @brief Возвращает значение флага SOF
 * @param index	: Номер дескриптора
 * @return Значение флага, SET or RESET
 */
FlagStatus TCRX_SOF_Flag(uint32_t index);

/**
 * @brief Возвращает значение флага EOF
 * @param index	: Номер дескриптора
 * @return Значение флага, SET or RESET
 */
FlagStatus TCRX_EOF_Flag(uint32_t index);

/**
 * @brief Возвращает значение флага ERROR
 * @param index	: Номер дескриптора
 * @return Значение флага, SET or RESET
 */
FlagStatus TCRX_ERROR_Flag(uint32_t index);

/**
 * @brief Выбор текущего дескриптора для приёма
 * @param index	: Номер дескриптора
 */
void TCRX_Set_Current_Descriptor(uint32_t index);

/**
 * @brief Получение номера активного дескриптора
 * @return Номер дескриптора
 */
uint32_t TCRX_Get_Current_Descriptor();


/**
 * @brief Активация приёма данных
 */
void TCRX_Enable();

/**
 * @brief Отключение приёма данных
 */
void TCRX_Disable();

/**
 * @brief Настройка параметров декодера
 * @param randomizer : Включение рандомизатора, принимает следующие значения:
 *                                              - TCRX_CODER_SEL_RAND
 *                                              - TCRX_CODER_SEL_RAND_OFF    
 * @param bch : Включение декодера БЧХ, принимает следующие значения:
 *                                              - TCRX_CODER_SEL_BCH
 *                                              - TCRX_CODER_SEL_BCH_OFF
 * @param viterbi : Включение сверточного декодера витерби, принимает следующие значения:
 *                                              - TCRX_CODER_SEL_VIT_HARD
 *                                              - TCRX_CODER_SEL_VIT_SOFT
 *                                              - TCRX_CODER_SEL_VIT_OFF
 */
void TCRX_Set_Decoder(uint32_t randomizer, uint32_t bch, uint32_t viterbi);

/**
 * @brief Возвращает значение флага переполнения FIFO
 * @return Значение флага, SET or RESET
 */
FlagStatus TCRX_FIFO_Overflow();

/**
 * @brief Установка значения маркера начала фрейма и разрешения единичной ошибки в маркере
 * @param start_seq : Значение маркера начала фрейма. Длина 16 бит. Первый принятый бит сравнивается со старшим битом
 * @param allow_1_err : Разрешение или запрещение единичной ошибки в маркере начала фрейма, принимает следующие значения:
 *                                              - TCRX_START_SEQ_ALLOW_1_ERR
 *                                              - TCRX_START_SEQ_DENY_1_ERR
 */
void TCRX_Set_Start_Sequence(uint32_t start_seq, uint32_t allow_1_err);

/**
 * @brief Установка значения маркера конца фрейма
 * @param tail_first : Значение маркера конца фрейма, первая часть. Длина 32 бит. Первый принятый бит сравнивается со старшим битом
 * @param tail_second : Значение маркера конца фрейма, вторая часть. Длина 32 бит. Последний принятый бит сравнивается с младшим битом
 */
void TCRX_Set_Tail_Sequence(uint32_t tail_first, uint32_t tail_second);

/**
 * @brief Открытие дескриптора на приём
 * @param index : Номер дескриптора
 * @param pointer : Адрес памяти, по которому расположено начало области для записи. Должен быть выровнен по 4 байтной границе
 * @param size : Размер области памяти, в которую будут записываться принятые данные. (значения от 0 до 1023)
 */
void TCRX_OpenDescriptor(uint32_t index, uint32_t pointer, uint32_t size);

#endif