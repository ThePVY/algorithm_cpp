/*!\file
 * \brief Этот файл содержит структуры, макросы и функции, необходимые для взаимодействия с аппаратным модулем передатчика телеметрической информации.
 *
 * Copyright(C) НПП Цифровые решения, 2018
 * Copyright(C) Команда разработчиков НПП Цифровые решения
 * Все права защищены.
 *
 * Программное обеспечение, описанное в этом файле, предназначено только для 
 * демонстрационных целей, и предоставляет программистам информацию о продукции 
 * организации "Цифровые решения". Это программное обеспечение поставляется "КАК ЕСТЬ" 
 * без каких-либо гарантий, "Цифровые решения" отказываются от любых гарантий, 
 * фактических или подразумеваемых, включая все подразумеваемые гарантии товарной пригодности, 
 * пригодности для конкретной цели и сохранения прав интеллектуальной собственности. 
 * Организация "Цифровые решения" не несет никакой ответственности за использование 
 * программного обеспечения, не предоставляет лицензий или прав на патент, авторское право, 
 * или любые другие права интеллектуальной собственности, на какие-либо продукты. 
 * Организация "Цифровые решения" оставляет за собой право вносить изменения в программное 
 * обеспечение без уведомления. Организация "Цифровые решения" также не дает никаких 
 * заверений или гарантий, что это программное приложение подойдет для использования 
 * без дальнейшего тестирования или модификаций.
 *
 * Разрешение на использование, копирование, изменение и распространение этого программного 
 * обеспечения и документации предоставляется согласно условиям "Цифровых решений" и 
 * соответствующих авторских прав своей лицензии без оплаты, при условии, 
 * что это программное обеспечение используется совместно с микроконтроллерами организации
 * "Цифровые решения". Эти права должны распространяться во всех копиях этого кода.
 */

#ifndef TMTX_H_
#define TMTX_H_

#include "types.h"

/** \brief  Структура дескрипторов модуля приемника телекомандной информации
 */
typedef struct
{
    volatile uint32_t DATA_PTR;                                                 ///< Указатель на данные
    volatile uint32_t HEADER;                                                   ///< Заголовок
}TCRX_DSC_T;

/** \brief  Структура для доступа к регистрам модуля передатчика телеметрической информации
 */
typedef struct
{
    __RW uint32_t DSCR1_PTR;                                                    /**< Смещение: 0x000 Дескриптор 1: указатель на область памяти */
    __RW uint32_t DSCR1_FLAG_SIZE;                                              /**< Смещение: 0x004 Дескриптор 1: флаги и размер области памяти */
    __RW uint32_t DSCR2_PTR;                                                    /**< Смещение: 0x008 Дескриптор 2: указатель на область памяти */
    __RW uint32_t DSCR2_FLAG_SIZE;                                              /**< Смещение: 0x00C Дескриптор 2: флаги и размер области памяти */
    __RW uint32_t GLOBAL_ENABLE;                                                /**< Смещение: 0x010 Включение блока в режим передачи */
    __RW uint32_t CODER_SEL;                                                    /**< Смещение: 0x014 Выбор энкодеров */
    __RW uint32_t PHY_FIFO_UNDERRUN;                                            /**< Смещение: 0x018 Флаг опустошения FIFO */
    __RW uint32_t MARKER_AND_FRAME_SIZE;                                        /**< Смещение: 0x01C Размер фрейма и размер синхромаркера */
    __RW uint32_t MARKER1;                                                      /**< Смещение: 0x020 Содержимое синхромаркера 1 */
    __RW uint32_t MARKER2;                                                      /**< Смещение: 0x024 Содержимое синхромаркера 2 */
    __RW uint32_t MARKER3;                                                      /**< Смещение: 0x028 Содержимое синхромаркера 3 */
    __RW uint32_t MARKER4;                                                      /**< Смещение: 0x02C Содержимое синхромаркера 4 */
    __RW uint32_t MARKER5;                                                      /**< Смещение: 0x030 Содержимое синхромаркера 5 */
    __RW uint32_t MARKER6;                                                      /**< Смещение: 0x034 Содержимое синхромаркера 6 */
    __RW uint32_t CODERS_CONFIG;	                                        /**< Смещение: 0x038 Настройки энкодеров */
}TMTX_T; 
 
/**
 * @brief Макросы для DSCR1_PTR, DSCR2_PTR
 */    
#define TMTX_DSCR_PTR_DSCR_PTR(x)       ((uint32_t)(((x) & 0x3FFFFFFF) << 2))     /**< указатель на начало передаваемой области данных во внутренней памяти.
                                                                                    Начало области должно быть выровнено по 4 байтной границе, младшие 2 бита указателя нули */


/**
 * @brief Макросы для DSCR1_SIZE_FLAG, DSCR2_SIZE_FLAG
 */    
#define TMTX_DSCR1_SIZE_FLAG_DATA_SIZE(x)            ((uint32_t)(((x) & 0x7FF) << 0))  /**< установка размера передаваемой области данных в байтах (0x000 = 1 байт) */
#define TMTX_DSCR1_SIZE_FLAG_DATA_PRES               ((uint32_t)(1 << 31))           /**< включение передачи записанных данных */

/**
 * @brief Макросы для GLOBAL_ENABLE
 */
#define TMTX_GLOBAL_ENABLE                      ((uint32_t)(1 << 0))            /**< включение всех модулей, ответственных за передачу данных */
   
/**
 * @brief Макросы для PHY_FIFO_UNDERRUN
 */
#define TMTX_PHY_FIFO_UNDERRUN                  ((uint32_t)(1 << 0))            /**< флаг опустошения асинхронного FIFO */

/**
 * @brief Типы и макросы для CODER_SEL
 */
typedef enum 
{
    TMTX_CODER_SEL_LDPC   = ((uint32_t)(1 << 0)),                               /**< выбор LDPC-энкодера */
    TMTX_CODER_SEL_TURBO  = ((uint32_t)(2 << 0)),                               /**< выбор Turbo-энкодера */
    TMTX_CODER_SEL_RS     = ((uint32_t)(3 << 0)),                               /**< выбор RS-энкодера */
    TMTX_CODER_SEL_NONE   = ((uint32_t)(0 << 0)),                               /**< отключение энкодера */
    TMTX_CODER_CONV_SEL    = ((uint32_t)(1 << 2)),                              /**< включение сверточного энкодера */
    TMTX_CODER_RAND_SEL    = ((uint32_t)(1 << 3)),                              /**< включение рандомизатора */
}TMTX_CODER_SEL_T;

/**
 * @brief Макросы для MARKER_AND_FRAME_SIZE
 */
#define TMTX_MARKER_AND_FRAME_FRAME_SIZE(x)     ((uint32_t)(((x) & 0xFFFF) << 0)) /**< период вставки синхромаркера в битах */
#define TMTX_MARKER_AND_FRAME_MARKER_SIZE(x)    ((uint32_t)(((x) & 0xFF) << 16))  /**< размер тела синхромаркера в битах */

/**
 * @brief Макросы и типы для CODERS_CONFIG
 */
typedef enum 
{
    TMTX_CC_CONV_1DIV2   = ((uint32_t)(1 << 0)),                                /**< тип сверточного энкодера 1/2 */
    TMTX_CC_CONV_2DIV3   = ((uint32_t)(2 << 0)),                                /**< тип сверточного энкодера 2/3 */
    TMTX_CC_CONV_3DIV4   = ((uint32_t)(3 << 0)),                                /**< тип сверточного энкодера 3/4 */
    TMTX_CC_CONV_5DIV6   = ((uint32_t)(5 << 0)),                                /**< тип сверточного энкодера 5/6 */
    TMTX_CC_CONV_7DIV8   = ((uint32_t)(7 << 0)),                                /**< тип сверточного энкодера 7/8 */
}TMTX_CODERS_CONFIG_CONV_T;

typedef enum 
{
    TMTX_CC_TURBO_1DIV2  = ((uint32_t)(0 << 8)),                                /**< тип Turbo энкодера 1/2 */
    TMTX_CC_TURBO_1DIV3  = ((uint32_t)(1 << 8)),                                /**< тип Turbo энкодера 1/3 */ 
    TMTX_CC_TURBO_1DIV4  = ((uint32_t)(2 << 8)),                                /**< тип Turbo энкодера 1/4 */ 
    TMTX_CC_TURBO_1DIV6  = ((uint32_t)(3 << 8)),                                /**< тип Turbo энкодера 1/6 */ 
}TMTX_CODERS_CONFIG_TURBO_T;                                                                                      

typedef enum 
{
    TMTX_CC_RS_TYPE_239     = ((uint32_t)(0 << 16)),                            /**< тип RS энкодера обычный (255,239)*/
    TMTX_CC_RS_TYPE_223     = ((uint32_t)(1 << 16)),                            /**< тип RS энкодера обычный (255,223)*/ 
    TMTX_CC_RS_TYPE_239_CONV     = ((uint32_t)(2 << 16)),                       /**< тип RS энкодера dual basis converted (255,239)*/ 
    TMTX_CC_RS_TYPE_223_CONV     = ((uint32_t)(3 << 16)),                       /**< тип RS энкодера dual basis converted (255,223)*/ 
}TMTX_CODERS_CONFIG_RS_T;

typedef enum 
{
	TMTX_CC_LDPC_TYPE_7136   = ((uint32_t)(0 << 24)),                       /**< тип LDPC энкодера (8160 ,7136) */  
}TMTX_CODERS_CONFIG_LDPC_T;




/**
 * @brief Макросы, относящиеся к логике работы контроллера
 */
#define TMTX_FRAME_SIZE_MAX                     2048                            /**< размер фрейма на входе энкодера в случае отсутствия кодирования (выбранный по умолчанию) */ 
#define TMTX_FRAME_SIZE_LDPC                    892                             /**< размер фрейма на входе энкодера LDPC */ 
#define TMTX_FRAME_SIZE_TURBO                   223                             /**< размер фрейма на входе энкодера TURBO */
#define TMTX_FRAME_SIZE_RS_239                  239                             /**< размер фрейма на входе энкодера Рида-Соломона 239 */
#define TMTX_FRAME_SIZE_RS_223                  223                             /**< размер фрейма на входе энкодера Рида-Соломона 223 */

#define TMTX_BIT_OUT_SIZE_MAX                   (TMTX_FRAME_SIZE_MAX*8)         /**< битовый размер фрейма на выходе энкодера в случае отсутствия кодирования (выбранный по умолчанию) */ 
#define TMTX_BIT_OUT_SIZE_LDPC_7136             8160                            /**< битовый размер фрейма на выходе LDPC энкодера 7136 */
#define TMTX_BIT_OUT_SIZE_LDPC_7156             8176                            /**< битовый размер фрейма на выходе LDPC энкодера 7156 */
#define TMTX_BIT_OUT_SIZE_TURBO_1DIV2           3576                            /**< (223*8*2+4*2) битовый размер фрейма на выходе TURBO энкодера со скоростью 1/2 */
#define TMTX_BIT_OUT_SIZE_TURBO_1DIV3           5364                            /**< (223*8*3+4*3) битовый размер фрейма на выходе TURBO энкодера со скоростью 1/3 */
#define TMTX_BIT_OUT_SIZE_TURBO_1DIV4           7152                            /**< (223*8*4+4*4) битовый размер фрейма на выходе TURBO энкодера со скоростью 1/4 */
#define TMTX_BIT_OUT_SIZE_TURBO_1DIV6           10728                           /**< (223*8*6+4*6) битовый размер фрейма на выходе TURBO энкодера со скоростью 1/6 */
#define TMTX_BIT_OUT_SIZE_RS                    2040                            /**< (255*8) битовый размер фрейма на выходе энкодера Рида-Соломона (одинаков для всех типов) */

#define TMTX_MAX_MARKER_SIZE			192				/**< максимальный размер синхромаркера в битах */
#define TMTX_MAX_DSCR_SIZE                      2048                            /**< максимальный размер дескриптора в байтах */

/**
 * @brief Установка указателя на адрес памяти для дескриптора 1
 * @param addr: Значение адреса, с которого дескриптор начнёт считывание данных
 */
void TMTX_Set_DSCR1_Pointer(uint32_t addr);

/**
 * @brief Установка указателя на адрес памяти для дескриптора 2
 * @param addr: Значение адреса, с которого дескриптор начнёт считывание данных
 */
void TMTX_Set_DSCR2_Pointer(uint32_t addr);

/**
 * @brief Установка размера дескриптора 1
 * @param size: размер дескриптора в байтах
 */
void TMTX_Set_DSCR1_Size(uint32_t size);

/**
 * @brief Установка размера дескриптора 2
 * @param size: размер дескриптора в байтах
 */
void TMTX_Set_DSCR2_Size(uint32_t size);

/**
 * @brief Необходимо вызывать функцию после того, как данные для дескриптора 1 подготовлены для передачи
 */
void TMTX_DSCR1_Data_Ready();

/**
 * @brief Необходимо вызывать функцию после того, как данные для дескриптора 2 подготовлены для передачи
 */
void TMTX_DSCR2_Data_Ready();

/**
 * @brief Функция активирует Global Enable контроллера: включение всех модулей, ответственных за передачу данных
 */
void TMTX_Global_Enable();

/**
 * @brief Функция отключает Global Enable контроллера: все кодеры, fifo, ahb контроллер будут находиться в асинхронном сбросе
 */
void TMTX_Global_Disable();

/**
 * @brief Возвращает тип используемого кодера
 * @return Тип используемого кодера, может принимать значения:
 *                                              - TMTX_CODER_SEL_LDPC
 *                                              - TMTX_CODER_SEL_TURBO 
 *                                              - TMTX_CODER_SEL_RS 
 *                                              - TMTX_CODER_SEL_NONE 
 */
uint32_t TMTX_Get_Coder();

/**
 * @brief Функция возвращает значение флага опустошения асинхронного FIFO
 * @return Значение флага, SET or RESET
 */
FlagStatus TMTX_FIFO_Underrun();

/**
 * @brief Сброс флага опустошения асинхронного FIFO
 */
void TMTX_FIFO_Underrun_Clear_Flag();

/**
 * @brief Установка размера синхромаркера и периода вставки синхромаркера
 * @param marker_size: Размер синхромаркера (в битах)
 * @param frame_size: Период вставки синхромаркера (в битах)
 */
void TMTX_Set_Marker_And_Frame_Size(uint8_t marker_size, uint32_t frame_size);

/**
 * @brief Возвращает тип используемого сверточного кодера
 * @return Тип используемого свёрточного кодера, может принимать значения:
 *                                              - TMTX_CC_CONV_1DIV2
 *                                              - TMTX_CC_CONV_2DIV3
 *                                              - TMTX_CC_CONV_3DIV4 
 *                                              - TMTX_CC_CONV_5DIV6
 *                                              - TMTX_CC_CONV_7DIV8
 */
uint32_t TMTX_Get_Conv_Type();

/**
 * @brief Возвращает тип используемого турбо кодера
 * @return Тип используемого свёрточного кодера, может принимать значения:
 *                                              - TMTX_CC_TURBO_1DIV2
 *                                              - TMTX_CC_TURBO_1DIV3
 *                                              - TMTX_CC_TURBO_1DIV4 
 *                                              - TMTX_CC_TURBO_1DIV6
 */
uint32_t TMTX_Get_Turbo_Type();
	
/**
 * @brief Возвращает тип используемого кодера Рида-Соломона
 * @return Тип используемого кодера Рида-Соломона, может принимать значения:
 *                                              - TMTX_CC_RS_TYPE_239
 *                                              - TMTX_CC_RS_TYPE_223
 *                                              - TMTX_CC_RS_TYPE_239_CONV 
 *                                              - TMTX_CC_RS_TYPE_223_CONV
 */
uint32_t TMTX_Get_RS_Type();


/**
 * @brief Возвращает код, соответствующий выбранному типу кодера LDPC
 * @return Тип используемого кодера LDPC, может принимать значения:
 *                                              - TMTX_CC_LDPC_TYPE_7136
 *                                              - TMTX_CC_LDPC_TYPE_7156
 */
uint32_t TMTX_Get_LDPC_Type();

/**
 * @brief Функция, возвращающая размер фрейма, соответствующий настроенному энкодеру, в байтах
 */
uint32_t TMTX_GetFrameSize();

/**
 * @brief Настройка параметров синхромаркера. Производится после выбора и настройки кодера.
 * @param marker_size: Размер синхромаркера в битах. Максимальное значение равно 192
 * @param marker1: Биты 0 - 31 синхромаркера. Первым передаётся младший бит переменной marker1
 * @param marker2: Биты 32 - 63 синхромаркера. Имеет значение в случае когда marker_size > 32
 * @param marker3: Биты 64 - 95 синхромаркера. Имеет значение в случае когда marker_size > 64
 * @param marker4: Биты 96 - 127 синхромаркера. Имеет значение в случае когда marker_size > 96
 * @param marker5: Биты 128 - 159 синхромаркера. Имеет значение в случае когда marker_size > 128
 * @param marker6: Биты 160 - 191 синхромаркера. Имеет значение в случае когда marker_size > 160
 */
void TMTX_SetSyncMarker(uint8_t marker_size, 
                        uint32_t marker1, 
                        uint32_t marker2, 
                        uint32_t marker3, 
                        uint32_t marker4, 
                        uint32_t marker5, 
                        uint32_t marker6);

/**
 * @brief Установка используемого кодера и настройка режима его работы, настройка рандомизатора и сверточного кодера.
 * @param coder_sel: Выбор используемого кодера (LDPC, Turbo, RS)
 * @param coder_config: Настройка режима кодирования для используемого кодера
 * @param rand_state: Включение/отключение рандомизатора
 * @param conv_state: Включение/отключение сверточного кодера
 * @param conv_speed: Выбор скорости работы сверточного кодера
 */
void TMTX_SetEncoder(uint32_t coder_sel, 
                     uint32_t coder_config, 
                     uint32_t rand_state, 
                     uint32_t conv_state, 
                     uint32_t conv_speed);


#endif