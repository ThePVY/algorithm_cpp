/*!\file
 * \brief Этот файл содержит структуры, макросы и функции, необходимые для взаимодействия с контроллером прямого доступа к памяти.
 *
 * Copyright(C) НПП Цифровые решения, 2018
 * Copyright(C) Команда разработчиков НПП Цифровые решения
 * Все права защищены.
 *
 * Программное обеспечение, описанное в этом файле, предназначено только для 
 * демонстрационных целей, и предоставляет программистам информацию о продукции 
 * организации "Цифровые решения". Это программное обеспечение поставляется "КАК ЕСТЬ" 
 * без каких-либо гарантий, "Цифровые решения" отказываются от любых гарантий, 
 * фактических или подразумеваемых, включая все подразумеваемые гарантии товарной пригодности, 
 * пригодности для конкретной цели и сохранения прав интеллектуальной собственности. 
 * Организация "Цифровые решения" не несет никакой ответственности за использование 
 * программного обеспечения, не предоставляет лицензий или прав на патент, авторское право, 
 * или любые другие права интеллектуальной собственности, на какие-либо продукты. 
 * Организация "Цифровые решения" оставляет за собой право вносить изменения в программное 
 * обеспечение без уведомления. Организация "Цифровые решения" также не дает никаких 
 * заверений или гарантий, что это программное приложение подойдет для использования 
 * без дальнейшего тестирования или модификаций.
 *
 * Разрешение на использование, копирование, изменение и распространение этого программного 
 * обеспечения и документации предоставляется согласно условиям "Цифровых решений" и 
 * соответствующих авторских прав своей лицензии без оплаты, при условии, 
 * что это программное обеспечение используется совместно с микроконтроллерами организации
 * "Цифровые решения". Эти права должны распространяться во всех копиях этого кода.
 */

#ifndef DMA_H_
#define DMA_H_

#include "types.h"

/**
 * @brief Структура для доступа к регистрам контроллера DMA
 */
typedef struct
{
    __RO uint32_t STATUS;                                                       /**< Смещение: 0x0000 Регистр статуса DMA */
    __WO uint32_t CFG;                                                          /**< Смещение: 0x0004 Регистр конфигурации DMA */
    __RW uint32_t CTRL_BASE_PTR;                                                /**< Смещение: 0x0008 Регистр базового адреса управляющих данных каналов  */
    __RO uint32_t ALT_CTRL_BASE_PTR;                                            /**< Смещение: 0x000C Регистр базового адреса альтернативных управляющих каналов */
    __RO uint32_t WAITONREQ_STATUS;                                             /**< Смещение: 0x0010 Регистр статуса ожидания запроса на обработку каналов  */
    __WO uint32_t CHNL_SW_REQUEST;                                              /**< Смещение: 0x0014 Регистр программного запроса на обработку каналов  */
    __RW uint32_t CHNL_USEBURST_SET;                                            /**< Смещение: 0x0018 Регистр установки пакетного обмена каналов  */
    __WO uint32_t CHNL_USEBURST_CLR;                                            /**< Смещение: 0x001C Регистр сброса пакетного обмена каналов */
    __RW uint32_t CHNL_REQ_MASK_SET;                                            /**< Смещение: 0x0020 Регистр маскирования запросов на обслуживание каналов */
    __WO uint32_t CHNL_REQ_MASK_CLR;                                            /**< Смещение: 0x0024 Регистр очистки маскирования запросов на обслуживание каналов */
    __RW uint32_t CHNL_ENABLE_SET;                                              /**< Смещение: 0x0028 Регистр установки разрешения каналов */
    __WO uint32_t CHNL_ENABLE_CLR;                                              /**< Смещение: 0x002C Регистр сброса разрешения каналов  */
    __RW uint32_t CHNL_PRI_ALT_SET;                                             /**< Смещение: 0x0030 Регистр установки первичной/альтернативной структуры управляющих данных каналов  */
    __WO uint32_t CHNL_PRI_ALT_CLR;                                             /**< Смещение: 0x0034 Регистр сброса первичной/альтернативной структуры управляющих данных каналов  */
    __RW uint32_t CHNL_PRIORITY_SET;                                            /**< Смещение: 0x0038 Регистр установки приоритета каналов */
    __WO uint32_t CHNL_PRIORITY_CLR;                                            /**< Смещение: 0x003C Регистр сброса приоритета каналов */
    __RW uint32_t RESERVED_0[3];                                     
    __RW uint32_t ERR_CLR;                                                      /**< Смещение: 0x04C Регистр сброса флага ошибки (R/W) */
    __RW uint32_t RESERVED_1[875];
}DMA_T;

/**
 * @brief Макросы и типы для управляющих данных каналов
 */
#define	DMA_CCTRL_STOP                  ((uint32_t)(0 << 0))                    /**< Стоп. Cтруктура управляющих данных является неправильной */
#define	DMA_CCTRL_BASIC                 ((uint32_t)(1 << 0))                    /**< Основной режим работы. Контроллер должен получить новый запрос для окончания цикла DMA, перед этим он должен выполнить процедуру арбитража */
#define	DMA_CCTRL_AUTOREQUEST           ((uint32_t)(2 << 0))                    /**< Режим работы Авто-запрос. Контроллер автоматически осуществляет запрос на обработку по соответствующему каналу в течение процедуры арбитража */
#define DMA_CCTRL_PINGPONG              ((uint32_t)(3 << 0))                    /**< Режим работы Пинг-понг. Контроллер выполняет цикл DMA используя поочередно две структуры */
#define DMA_CCTRL_MEMSG_PRIM            ((uint32_t)(4 << 0))                    /**< Режим работы scatter-gather с памятью для первичной структуры управляющих данных*/
#define	DMA_CCTRL_MEMSG_ALT             ((uint32_t)(5 << 0))                    /**< Режим работы scatter-gather с памятью для альтернативной структуры управляющих данных*/
#define DMA_CCTRL_PERIPHSG_PRIM         ((uint32_t)(6 << 0))                    /**< Режим работы scatter-gather с периферией для первичной структуры управляющих данных*/
#define DMA_CCTRL_PERIPHSG_ALT          ((uint32_t)(7 << 0))                    /**< Режим работы scatter-gather с периферией для альтернативной структуры управляющих данных*/
 
  
#define DMA_NEXT_USEBURST_EN            ((uint32_t)(1 << 3))                    /**< Контроллер изменяет значение chnl_useburst_set[C] в состояние «1» */
#define DMA_NEXT_USEBURST_DIS           ((uint32_t)(0 << 3))                    /**< Контроллер не изменяет значение chnl_useburst_set[C] */
  
#define DMA_N_MINUS_1(n)                ((uint32_t)(((n) & 0x07FF) << 4))         /**< Общее количество передач DMA (n+1), из которых состоит цикл DMA */
#define DMA_R_POWER(n)                  ((uint32_t)(((n) & 0x000F) << 14))        /**< Количество передач DMA (2^n) до выполнения контроллером процедуры арбитража */
  
#define DMA_SRC_PROT_CACHE_EN           ((uint32_t)(1 << 18))                   /**< Разрешение кеширования при считывании из источника */
#define DMA_SRC_PROT_CACHE_DIS          ((uint32_t)(0 << 18))                   /**< Разрешение кеширования при считывании из источника */
  
#define DMA_SRC_PROT_BUFFER_EN          ((uint32_t)(1 << 19))                   /**< Разрешение буферизации при считывании из источника */
#define DMA_SRC_PROT_BUFFER_DIS         ((uint32_t)(0 << 19))                   /**< Разрешение буферизации при считывании из источника */
  
#define DMA_SRC_PROT_PRIVILEGE_EN       ((uint32_t)(1 << 20))                   /**< Разрешение привелигированного доступа при считывании из источника */
#define DMA_SRC_PROT_PRIVILEGE_DIS      ((uint32_t)(0 << 20))                   /**< Разрешение привелигированного доступа при считывании из источника */
  
#define DMA_DST_PROT_CACHE_EN           ((uint32_t)(1 << 21))                   /**< Разрешение кеширования при записи в приемник */
#define DMA_DST_PROT_CACHE_DIS          ((uint32_t)(0 << 21))                   /**< Разрешение кеширования при записи в приемник */
  
#define DMA_DST_PROT_BUFFER_EN          ((uint32_t)(1 << 22))                   /**< Разрешение буферизации при записи в приемник */
#define DMA_DST_PROT_BUFFER_DIS         ((uint32_t)(0 << 22))                   /**< Разрешение буферизации при записи в приемник */
  
#define DMA_DST_PROT_PRIVILEGE_EN       ((uint32_t)(1 << 23))                   /**< Разрешение привелигированного доступа при записи в приемник */
#define DMA_DST_PROT_PRIVILEGE_DIS      ((uint32_t)(0 << 23))                   /**< Разрешение привелигированного доступа при записи в приемник */

#define	DMA_SRC_DATA_SIZE_BYTE          ((uint32_t)(0 << 24))                   /**< Размерность данных источника 8 бит */ 
#define	DMA_SRC_DATA_SIZE_HALFWORD      ((uint32_t)(1 << 24))                   /**< Размерность данных источника 16 бит */ 
#define	DMA_SRC_DATA_SIZE_WORD          ((uint32_t)(2 << 24))                   /**< Размерность данных источника 32 бита */ 
 
#define	DMA_SRC_ADDR_INC_BYTE           ((uint32_t)(0 << 26))                   /**< Шаг инкремента адреса источника 8 бит */ 
#define	DMA_SRC_ADDR_INC_HALFWORD       ((uint32_t)(1 << 26))                   /**< Шаг инкремента адреса источника 16 бит */ 
#define	DMA_SRC_ADDR_INC_WORD           ((uint32_t)(2 << 26))                   /**< Шаг инкремента адреса источника 32 бита */
#define	DMA_SRC_ADDR_INC_NULL           ((uint32_t)(3 << 26))                   /**< Без инкремента адреса источника */ 

#define	DMA_DST_DATA_SIZE_BYTE          ((uint32_t)(0 << 28))                   /**< Размерность данных приемника 8 бит */ 
#define	DMA_DST_DATA_SIZE_HALFWORD      ((uint32_t)(1 << 28))                   /**< Размерность данных приемника 16 бит */ 
#define	DMA_DST_DATA_SIZE_WORD          ((uint32_t)(2 << 28))                   /**< Размерность данных приемника 32 бита */ 

#define	DMA_DST_ADDR_INC_BYTE           ((uint32_t)(0 << 30))                   /**< Шаг инкремента адреса приемника 8 бит */ 
#define	DMA_DST_ADDR_INC_HALFWORD       ((uint32_t)(1 << 30))                   /**< Шаг инкремента адреса приемника 16 бит */ 
#define	DMA_DST_ADDR_INC_WORD           ((uint32_t)(2 << 30))                   /**< Шаг инкремента адреса приемника 32 бита */
#define	DMA_DST_ADDR_INC_NULL           ((uint32_t)(3 << 30))                   /**< Без инкремента адреса приемника */ 
   
/**
 * @brief Структура управляющих данных
 */
typedef struct 
{
    uint32_t src_data_end_ptr;                                                  /**< Указатель последнего адреса данных источника */
    uint32_t dst_data_end_ptr;                                                  /**< Указатель на последний адрес данных приемника */
    volatile uint32_t ctrl;                                                     /**< Разряды управления */
    uint32_t reserved;                                                          /**< Резерв*/
}DMA_CHNL_CTRL_T;

/**
 * @brief Структура для доступа к управлющим данным всех каналов
 */
typedef struct 
{              
    DMA_CHNL_CTRL_T prim_chan[24];                                              /**< Первичные структуры управляющих данных */
    DMA_CHNL_CTRL_T alt_chan[24];                                               /**< Альтернативные структуры управляющих данных */
}DMA_CTRL_T;


#endif /* DMA_H_ */